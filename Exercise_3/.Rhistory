library(RCurl)
library(tidyverse)
library(mosaic)
library(rpart)
library(rpart.plot)
library(rsample)
library(randomForest)
library(gbm)
# Read data #
dengue = read.csv("https://raw.githubusercontent.com/Cheng-Jipeng/ECO395M/master/data/dengue.csv")
dengue$city = factor(dengue$city)
dengue$season = factor(dengue$season, levels=c('spring', 'summer', 'fall', 'winter'))
dengue = dengue %>%
select(total_cases, city, season, specific_humidity, tdtr_k, precipitation_amt) %>%
na.omit()
# train/test split #
dengue_split =  initial_split(dengue, prop=0.8)
dengue_train = training(dengue_split)
dengue_test  = testing(dengue_split)
# CART
dengue_tree = rpart(total_cases ~ city + season + specific_humidity + tdtr_k +
precipitation_amt, data=dengue_train,
control = rpart.control(cp = 0.01, minsplit=30))
### plotcp(dengue_tree)
# random forest #
dengue_forest = randomForest(total_cases ~ city + season + specific_humidity + tdtr_k +
precipitation_amt, data=dengue_train, importance = TRUE)
### plot(dengue_forest)
# boosting #
dengue_boost = gbm(total_cases ~ city + season + specific_humidity + tdtr_k +
precipitation_amt, data=dengue_train, cv.folds = 10,
interaction.depth=4, n.trees=500, shrinkage=.05)
### gbm.perf(dengue_boost)
# compare RMSE on the test set #
cbind(modelr::rmse(dengue_tree, dengue_test),
modelr::rmse(dengue_forest, dengue_test),
modelr::rmse(dengue_boost, dengue_test))
## Use Kable to name columns in .Rmd. The results suggest that random forests model
## have the best performance on the testing data.
# Plot partial dependence functions #
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
partialPlot(dengue_forest, dengue_test, 'precipitation_amt', las=1)
partialPlot(dengue_forest, dengue_test, 'season', las=1)
