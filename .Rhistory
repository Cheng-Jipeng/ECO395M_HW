library(tidyverse)
library(ggplot2)
library(modelr)
library(rsample)
library(mosaic)
library(caret)
library(parallel)
library(foreach)
library(ggpubr)
library(kknn)
data(SaratogaHouses)
# Split into training and testing sets with K folds
K_folds = 5
sh_folds = crossv_kfold(SaratogaHouses, k = K_folds)
# Question 1
lm1 = map(sh_folds$train, ~ lm(price ~ lotSize + bedrooms + bathrooms, data=. ))
lm2 = map(sh_folds$train, ~ lm(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction,
data=. ))
lm3 = map(sh_folds$train, ~ lm(price ~ (. - pctCollege - sewer - waterfront - landValue - newConstruction)^2,
data=. ))
lm4 = map(sh_folds$train, ~ lm(price ~ livingArea + centralAir + bathrooms + fuel +
lotSize + bedrooms + rooms + livingArea:centralAir + livingArea:bathrooms +
livingArea:fuel + livingArea:rooms + bathrooms:bedrooms + centralAir:fuel +
bathrooms:fuel + fuel:lotSize + centralAir:bathrooms +  bedrooms:rooms, data=. ))
errs_lm1 = map2_dbl(lm1, sh_folds$test, modelr::rmse)
errs_lm2 = map2_dbl(lm2, sh_folds$test, modelr::rmse)
errs_lm3 = map2_dbl(lm3, sh_folds$test, modelr::rmse)
errs_lm4 = map2_dbl(lm4, sh_folds$test, modelr::rmse)
# Predictions out of sample
# Root Mean squared error
c(errs_lm1 = mean(errs_lm1), errs_lm2= mean(errs_lm2), errs_lm3 = mean(errs_lm3), errs_lm4 =  mean(errs_lm4))
#// The result suggests that lm4 is the best
scale_train = scale(sh_folds$train)
View(sh_folds)
sh_folds$train
sh_folds$train[1]
sh_folds$train[[1]]
sh_folds$train[1][1]
sh_folds$train[1][1][1]
sh_folds$train[[1]]
sh_folds$train[[1]][1]
sh_folds$train[[1]][1] = scale(sh_folds$train[[1]][1])
# XDD
coef(lm4)
# XDD
coef(lm4)
lm4 = map(sh_folds$train, ~ lm(price ~ livingArea + centralAir + bathrooms + fuel +
lotSize + bedrooms + rooms + livingArea:centralAir + livingArea:bathrooms +
livingArea:fuel + livingArea:rooms + bathrooms:bedrooms + centralAir:fuel +
bathrooms:fuel + fuel:lotSize + centralAir:bathrooms +  bedrooms:rooms, data=. ))
# XDD
lm4_pred = lm(price ~ livingArea + centralAir + bathrooms + fuel +
lotSize + bedrooms + rooms + livingArea:centralAir + livingArea:bathrooms +
livingArea:fuel + livingArea:rooms + bathrooms:bedrooms + centralAir:fuel +
bathrooms:fuel + fuel:lotSize + centralAir:bathrooms +  bedrooms:rooms, data= SaratogaHouses)
coef(lm4_pred)
coef(lm4_pred)
coef(lm4_pred) %>% head(5)
coef(lm4_pred) %>% head(1:5)
coef(lm4_pred)[1:4]
coef(lm4_pred)[2:6]
coef(lm4_pred)[2:6] %>% as.data.frame()
dtype(coef(lm4_pred)[2:6] )
typeof(coef(lm4_pred)[2:6])
typeof(coef(lm4_pred)[2:6] %>% as.data.frame() )
coef(lm4_pred)[2:6] %>% as.data.frame()
coef_lm4_pred= coef(lm4_pred)[2:6] %>% as.data.frame()
colnames(coef_lm4_pred) = c("f", "s")
colnames(coef_lm4_pred) = c("f")
coef_lm4_pred
colnames(coef_lm4_pred) = c("Coefficients")
coef_lm4_pred
colnames(coef_lm4_pred) = c("Predcited Value")
coef_lm4_pred
library(RCurl)
library(tidyverse)
g_c = read.csv('https://raw.githubusercontent.com/Cheng-Jipeng/ECO395M/master/data/german_credit.csv')
summary(g_c)
count(g_c$Default==1)
g_c %>%
group_by(history) %>%
count(Default==1)
ggplot(aes(x=Default/300, y=history), data=g_c) +
geom_col() +
labs(title="default probability by credit history", y="history performance", x="Default probability")
g_c_glm = glm(formula = Default ~ duration + amount + installment + age +
history + purpose + foreign, family = "binomial", data = g_c)
summary(g_c_glm)
coef(g_c_glm)
coef(g_c_glm) %>% round(2)
View(g_c)
sum(g_c$Default==1)
g_c %>%
group_by(history) %>%
count(Default==1)
g_c2 = g_c %>%
group_by(history) %>%
count(Default==1)
ggplot(aes(x=Default/300, y=history), data=g_c2) +
geom_col() +
labs(title="default probability by credit history", y="history performance", x="Default probability")
View(g_c2)
ggplot(aes(x=Default/300, y=history), data=g_c) +
geom_col() +
labs(title="default probability by credit history", y="history performance", x="Default probability")
g_c2
g_c2 = g_c %>%
group_by(history) %>%
summary(p_default = count(Default==1)/n())
g_c2
g_c2 = g_c %>%
group_by(history) %>%
summarize(p_default = count(Default==1)/n())
g_c2
ggplot(data = g_c2) +
geom_bar()
ggplot(data = g_c2) +
geom_bar(aes(x = history, y=p_default))
ggplot(data = g_c2) +
geom_histogram(aes(x = history))
ggplot(data = g_c2) +
geom_histogram(aes(x = history), stat="count")
ggplot(data=g_c2) +
geom_col(aes(x=Default/300, y=history)) +
labs(title="default probability by credit history", y="history performance", x="Default probability")
g_c2
ggplot(data=g_c2) +
geom_col(aes(x=history, y=p_default)) +
labs(title="default probability by credit history", y="history performance", x="Default probability")
ggplot(data=g_c2) +
geom_col(aes(x=history, y=p_default)) +
labs(x="History Performance", y="Default Probability")
g_c2
g_c2 = g_c %>%
group_by(history) %>%
summarize(p_default = count(Default==1)/n())
g_c2 = g_c %>%
group_by(history) %>%
summarize(p_default = sum(Default==1)/n())
g_c2
ggplot(data=g_c2) +
geom_col(aes(x=history, y=p_default)) +
labs(x="History Performance", y="Default Probability")
coef(g_c_glm)[2:] %>% round(2)
coef_g_c_glm = coef(g_c_glm) %>% round(2) %>% as.data.frame()
coef_g_c_glm[2:]
coef_g_c_glm[2:,]
coef_g_c_glm =
coef(g_c_glm) %>% round(2) %>% as.data.frame()
coef_g_c_glm =
coef(g_c_glm) %>% round(2) %>% as.data.frame()
coef(g_c_glm) %>% round(2) %>% as.data.frame()
coef(g_c_glm)[2:4] %>% round(2) %>% as.data.frame()
knitr::opts_chunk$set(echo=TRUE)
exp(coef(g_c_glm))/(1+exp(coef(g_c_glm)))
exp(coef(g_c_glm))/(1+exp(coef(g_c_glm)))[6:7] %>% round(2) %>%
kbl(caption = "History Variable vis-a-vis Predicting Defaults") %>%
kable_styling()
exp(coef(g_c_glm))/(1+exp(coef(g_c_glm)))[6:7]
b_g_c_glm = exp(coef(g_c_glm))/(1+exp(coef(g_c_glm)))
b_g_c_glm[6:7]
b_g_c_glm[6:7] %>% round(2) %>%
kbl(caption = "History Variable vis-a-vis Predicting Defaults") %>%
kable_styling()
b_g_c_glm[6:7] %>% round(2) %>%
kbl(caption = "History Variable vis-a-vis Predicting Defaults") %>%
kable_styling(full_width = F)
colnames(b_g_c_glm) = c("The partial effects on default probability")
b_g_c_glm = exp(coef(g_c_glm))/(1+exp(coef(g_c_glm))) %>% as.data.frame()
colnames(b_g_c_glm) = c("The partial effects on default probability")
colnames(b_g_c_glm) = c("The partial effects on default probability")
b_g_c_glm
b_g_c_glm[6:7]
b_g_c_glm[6:7,]
b_g_c_glm = coef(g_c_glm)[6:7]%>% as.data.frame()
colnames(b_g_c_glm) = c("The partial effects on default probability")
b_g_c_glm %>% round(2) %>%
kbl(caption = "History Variable vis-a-vis Predicting Defaults") %>%
kable_styling(full_width = )
remove(list= ls())
library(RCurl)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(gamlr)
library(rsample)
library(modelr)
library(parallel)
library(foreach)
# Read in data
hotel_dev = read.csv("https://raw.githubusercontent.com/Cheng-Jipeng/ECO395M/master/data/hotels_dev.csv")
hotel_val = read.csv("https://raw.githubusercontent.com/Cheng-Jipeng/ECO395M/master/data/hotels_val.csv")
#####
# 1. Model building
#####
hotel_dev_split = initial_split(hotel_dev, prop = 0.8)
hotel_dev_train = training(hotel_dev_split)
hotel_dev_test = testing(hotel_dev_split)
## (1) Build baseline models
baseline1 = glm(children ~ market_segment + adults + customer_type + is_repeated_guest,
data = hotel_dev_train, family = "binomial")
baseline2 = glm(children ~ . - arrival_date , data = hotel_dev_train, family = "binomial")
## (2) Build best model - Feature engineering with LASSO
#//idea: use LASSO to find main effects + interaction by eyeballing
hotel_lasso_x_main = model.matrix(children ~  (.-1-arrival_date), data=hotel_dev_train)
hotel_lasso_x_itac = model.matrix(children ~  (.-1-arrival_date)^2, data=hotel_dev_train)
hotel_lasso_y = hotel_dev_train$children
#//see https://cran.r-project.org/web/packages/gamlr/gamlr.pdf to see more
hotel_lasso_main = cv.gamlr(hotel_lasso_x_main, hotel_lasso_y, nfold=10, verb=TRUE, family="binomial")
hotel_lasso_itac = cv.gamlr(hotel_lasso_x_itac, hotel_lasso_y, nfold=10, verb=TRUE, family="binomial")
coef(hotel_lasso_main, select='min')
#### extract strong single covariates
coef(hotel_lasso_main, select='min') %>% round(2)
#### extract strong single covariates
coef_hotel_lasso_main = coef(hotel_lasso_main, select='min') %>% as.data.frame()
#### extract strong single covariates
coef_hotel_lasso_main = coef(hotel_lasso_main, select='min') %>% as.matrix() %>% as.data.frame()
coef_hotel_lasso_main
coef(hotel_lasso_main, select='min')
coef_hotel_lasso_main %>%
select(seg100 == 0)
View(coef_hotel_lasso_main)
colnames(coef_hotel_lasso_main) = c("Partial effects")
coef_hotel_lasso_main %>%
select(seg100 == 0)
View(coef_hotel_lasso_main)
coef_hotel_lasso_main %>%
select(Partial effects == 0)
coef_hotel_lasso_main %>%
select("Partial effects" == 0)
#### extract strong single covariates
coef_hotel_lasso_main = coef(hotel_lasso_main, select='min') %>% as.matrix() %>% as.data.frame()
coef_hotel_lasso_main %>%
filter(seg100 == 0)
%>% as.matrix() %>% as.data.frame() %>%
select("Partial effects" == 0)
%>% as.matrix() %>% as.data.frame() %>%
select(seg100 == 0)
%>% as.matrix() %>% as.data.frame() %>%
filter(seg100 == 0)
coef(hotel_lasso_main, select='min')
%>% as.matrix() %>% as.data.frame()
#### extract strong single covariates
coef_hotel_lasso_main = coef(hotel_lasso_main, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(seg100 == 0)
colnames(coef_hotel_lasso_main) = c("Partial effects")
coef_hotel_lasso_main
strong_interaction_name = coef(hotel_lasso_itac, select = 'min')@Dimnames[1] %>% as.data.frame()
strong_interaction_name = strong_interaction_name[coef(hotel_lasso_itac, select = 'min')@i,]
strong_interaction_beta = coef(hotel_lasso_itac, select = 'min')@x[-1]
coef_lasso = cbind(strong_interaction_name, strong_interaction_beta) %>% # transform matrix to dataframe
as.data.frame() %>%
mutate(abs_beta = abs(as.numeric(strong_interaction_beta)))
coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
head(30)
colnames(coef_lasso) = c("","")
coef_lasso
coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
head(30)
coef_lasso = cbind(strong_interaction_name, strong_interaction_beta) %>% # transform matrix to dataframe
as.data.frame() %>%
mutate(abs_beta = abs(as.numeric(strong_interaction_beta)))
coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
head(30)
coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
round(3) %>%
head(30)
coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
head(30) %>%
ronnd(3)
coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
head(30) %>%
round(3)
coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
head(30)
coef_lasso = coef_lasso %>% # filter in strong interaction
filter(!(strong_interaction_name %in% colnames(hotel_dev))) %>%
arrange(desc(abs_beta)) %>%
head(30)
colnames(coef_lasso) = c("Strong Interaction","Partial Effects", "Absolute Values of Partial Effects")
coef_lasso
lasso_selected_try = glm(children ~ (.-arrival_date-deposit_type) + meal:reserved_room_type+ reserved_room_type:assigned_room_type+
hotel:reserved_room_type+ market_segment:reserved_room_type+meal:is_repeated_guest+
adults:previous_bookings_not_canceled+ meal:previous_bookings_not_canceled+ market_segment:customer_type+
is_repeated_guest:assigned_room_type+ assigned_room_type:required_car_parking_spaces,
data = hotel_dev_train, family = "binomial")
coef(lasso_selected_try)
coef_lasso_selected_try = coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(seg100 == NA)
coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame()
coef_lasso_selected_try = coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(V1 == NA)
colnames(coef_lasso_selected_try) = c("Partial effects")
coef_lasso_selected_try
coef_lasso_selected_try = coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(V1 == "NA")
coef(coef_lasso_selected_try) # rule out non-converged covariates & interactions
coef_lasso_selected_try = coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame()
coef_lasso_selected_try
View(coef_lasso_selected_try)
coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(V1 == "NA")
coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(V1 == NA)
coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(!is.na(V1))
coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(is.na(V1))
coef_lasso_selected_try = coef(lasso_selected_try, select='min') %>%
as.matrix() %>%
as.data.frame() %>%
filter(is.na(V1))
colnames(coef_lasso_selected_try) = c("Partial effects")
coef(coef_lasso_selected_try) # rule out non-converged covariates & interactions
coef_lasso_selected_try
coef_lasso_selected_try # rule out non-converged covariates & interactions
lasso_selected = glm(children ~ (.-arrival_date-deposit_type) + hotel:reserved_room_type+ meal:is_repeated_guest+
adults:previous_bookings_not_canceled+ meal:previous_bookings_not_canceled+ market_segment:customer_type+
is_repeated_guest:assigned_room_type+ assigned_room_type:required_car_parking_spaces,
data = hotel_dev_train, family = "binomial")
## (3) Out-of-sample performance evaluation: likelihood/deviance/TPR/FPR/FDR
### baseline evaluation
#### calculate deviance
test_child_index = which(hotel_dev_test$children == 1) # find true book with children
phat_baseline1 = predict(baseline1, hotel_dev_test, type = "response") # baseline1
baseline1_predict_deviance = -2 * sum(log(phat_baseline1[test_child_index]))
phat_baseline2 = predict(baseline2, hotel_dev_test, type = "response") # baseline2
baseline2_predict_deviance = -2 * sum(log(phat_baseline2[test_child_index]))
phat_lasso_selected = predict(lasso_selected, hotel_dev_test, type = "response") # lasso_selected
lasso_selected_predict_deviance = -2 * sum(log(phat_lasso_selected[test_child_index]))
#### confusion matrix + relevant evaluation
yhat_baseline1 = ifelse(phat_baseline1>0.5, 1, 0)
yhat_baseline2 = ifelse(phat_baseline2>0.5, 1, 0)
yhat_lasso_selected = ifelse(phat_lasso_selected>0.5, 1, 0)
confusion_baseline1 = table(y=hotel_dev_test$children, yhat=yhat_baseline1)
confusion_baseline1 = cbind(confusion_baseline1, c(0,0))
confusion_baseline2 = table(y=hotel_dev_test$children, yhat=yhat_baseline2)
confusion_lasso_selected = table(y=hotel_dev_test$children, yhat=yhat_lasso_selected)
## (4) Output: a table of measuring out-of-sample performance
measurement = c("Deviance", "TPR", "FPR", "FDR")
eval_baseline1 = c(baseline1_predict_deviance,
confusion_baseline1[2,2]/(confusion_baseline1[2,2]+confusion_baseline1[2,1]),
confusion_baseline1[1,2]/(confusion_baseline1[1,1]+confusion_baseline1[1,2]),
confusion_baseline1[1,2]/(confusion_baseline1[1,2]+confusion_baseline1[2,2])) %>% round(3)
eval_baseline2 = c(baseline2_predict_deviance,
confusion_baseline2[2,2]/(confusion_baseline2[2,2]+confusion_baseline2[2,1]),
confusion_baseline2[1,2]/(confusion_baseline2[1,1]+confusion_baseline2[1,2]),
confusion_baseline2[1,2]/(confusion_baseline2[1,2]+confusion_baseline2[2,2])) %>% round(3)
eval_lasso_selected = c(lasso_selected_predict_deviance,
confusion_lasso_selected[2,2]/(confusion_lasso_selected[2,2]+confusion_lasso_selected[2,1]),
confusion_lasso_selected[1,2]/(confusion_lasso_selected[1,1]+confusion_lasso_selected[1,2]),
confusion_lasso_selected[1,2]/(confusion_lasso_selected[1,2]+confusion_lasso_selected[2,2])) %>% round(3)
rbind(measurement, eval_baseline1, eval_baseline2, eval_lasso_selected)
rbind(measurement, eval_baseline1, eval_baseline2, eval_lasso_selected) %>% as.data.frame()
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
rbind(measurement, eval_baseline1, eval_baseline2, eval_lasso_selected) %>% as.data.frame() %>%
header.true()
rbind(measurement, eval_baseline1, eval_baseline2, eval_lasso_selected) %>% as.data.frame() %>%
header.true() %>%
rownames() = c("Baseline 1", "Baseline 2", "Best")
eval_models = rbind(measurement, eval_baseline1, eval_baseline2, eval_lasso_selected) %>% as.data.frame() %>%
header.true() %>%
rownames() = c("Baseline 1", "Baseline 2", "Best")
eval_models = rbind(measurement, eval_baseline1, eval_baseline2, eval_lasso_selected) %>% as.data.frame() %>%
header.true()
rownames(eval_models) = c("Baseline 1", "Baseline 2", "Best")
eval_models
