select(total_cases, city, season, specific_humidity, tdtr_k, precipitation_amt) %>%
na.omit()
# train/test split #
dengue_split =  initial_split(dengue, prop=0.8)
dengue_train = training(dengue_split)
dengue_test  = testing(dengue_split)
# CART
dengue_tree = rpart(total_cases ~ city + season + specific_humidity + tdtr_k +
precipitation_amt, data=dengue_train,
control = rpart.control(cp = 0.01, minsplit=30))
### plotcp(dengue_tree)
# random forest #
dengue_forest = randomForest(total_cases ~ city + season + specific_humidity + tdtr_k +
precipitation_amt, data=dengue_train, importance = TRUE)
### plot(dengue_forest)
# boosting #
dengue_boost = gbm(total_cases ~ city + season + specific_humidity + tdtr_k +
precipitation_amt, data=dengue_train, cv.folds = 10,
interaction.depth=4, n.trees=500, shrinkage=.05, distribution = "gaussian")
specific_humidity_plot = partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
precipitation_amt_plot = partialPlot(dengue_forest, dengue_test, 'precipitation_amt', las=1)
season_plot = partialPlot(dengue_forest, dengue_test, 'season', las=1)
ggarrange(specific_humidity_plot, precipitation_amt_plot, season_plot,
ncol = 1, nrow = 3)
library(ggplot2)
ggarrange(specific_humidity_plot, precipitation_amt_plot, season_plot,
ncol = 1, nrow = 3)
library(ggpubr)
library(dplyr)
ggarrange(specific_humidity_plot, precipitation_amt_plot, season_plot,
ncol = 1, nrow = 3)
season_plot
partialPlot(dengue_forest, dengue_test, 'season', las=1)
ggarrange(partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1), partialPlot(dengue_forest, dengue_test, 'precipitation_amt', las=1), partialPlot(dengue_forest, dengue_test, 'season', las=1) ,
ncol = 1, nrow = 3)
plot(dengue_forest, 'season')
plot(dengue_forest, 'season')
pdp::partial(dengue_forest, pred.var = 'season')
# Plot partial dependence functions #
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
# Plot partial dependence functions #
partialPlot(dengue_forest, dengue_test, 'specific_humidity')
partialPlot(dengue_forest, dengue_test, 'specific_humidity')
# Plot partial dependence functions #
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', add=TRUE)
# Plot partial dependence functions #
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', add=TRUE)
# Plot partial dependence functions #
par(mfrow=c(2, 3))
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', add=TRUE)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', plot = TRUE)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', add=TRUE)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', plot = TRUE, add=TRUE)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', plot = TRUE)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', plot = TRUE)
# Plot partial dependence functions #
plot()
partialPlot(dengue_forest, dengue_test, 'specific_humidity')
# Plot partial dependence functions #
plot(partialPlot(dengue_forest, dengue_test, 'specific_humidity'))
# Plot partial dependence functions #
test = plot(partialPlot(dengue_forest, dengue_test, 'specific_humidity'))
partialPlot(dengue_forest, dengue_test, 'specific_humidity', add=TRUE)
# Plot partial dependence functions #
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
partialPlot(dengue_forest, dengue_test, 'precipitation_amt', las=1)
partialPlot(dengue_forest, dengue_test, 'season', las=1)
# Plot partial dependence functions #
test = partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
test
plot(test)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1, add= TRUE)
partialPlot(dengue_forest, dengue_test, 'precipitation_amt', las=1, add= TRUE)
partialPlot(dengue_forest, dengue_test, 'specific_humidity', las=1)
knitr::opts_chunk$set(echo=FALSE)
library(tidyverse)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rsample)
library(randomForest)
library(lubridate)
library(modelr)
library(gbm)
library(pdp)
greenbuildings = read.csv("https://raw.githubusercontent.com/Cheng-Jipeng/ECO395M/master/data/greenbuildings.csv")
greenbuildings_new = greenbuildings %>%
filter(is.na(empl_gr) == FALSE)
greenbuildings_new = mutate(greenbuildings_new,
revenue = Rent*leasing_rate)
View(greenbuildings_new)
grbds_lasso_X = model.matrix(revenue ~ -1 + cluster + size + empl_gr +
stories + age + renovated + class_a + class_b +
green_rating + net + amenities + cd_total_07 +
hd_total07 + total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + City_Market_Rent,
data=greenbuildings_train)
greenbuildings_split =  initial_split(greenbuildings_new, prop=0.8)
greenbuildings_train = training(greenbuildings_split)
greenbuildings_test  = testing(greenbuildings_split)
greenbuildings_rforest = randomForest(revenue ~ cluster + size + empl_gr + stories + age + renovated + class_a + class_b + green_rating + net + amenities +  cd_total_07 + hd_total07 + total_dd_07 + Precipitation + Gas_Costs + Electricity_Costs + City_Market_Rent, data = greenbuildings_train, importance = TRUE)
# Boosting
boost1 = gbm(revenue ~ cluster + size + empl_gr + stories + age + renovated + class_a + class_b + green_rating + net + amenities + cd_total_07 + hd_total07 + total_dd_07 + Precipitation + Gas_Costs + Electricity_Costs + City_Market_Rent, data = greenbuildings_train, interaction.depth=4, n.trees=350, shrinkage=.05, distribution="gaussian")
grbds_knn = train(revenue ~ cluster + size + empl_gr + stories + age + renovated +
class_a + class_b + green_rating + net + amenities + cd_total_07 +
hd_total07 + total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + City_Market_Rent,
data = greenbuildings_train, method="knn",
trControl=trainControl(method="cv",number=5),
preProc = c("center", "scale"))
library(caret)
# KNN
grbds_knn = train(revenue ~ cluster + size + empl_gr + stories + age + renovated +
class_a + class_b + green_rating + net + amenities + cd_total_07 +
hd_total07 + total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + City_Market_Rent,
data = greenbuildings_train, method="knn",
trControl=trainControl(method="cv",number=5),
preProc = c("center", "scale"))
grbds_knn_pred = predict(grbds_knn, newdata = greenbuildings_test)
# LASSO
grbds_lasso_X = model.matrix(revenue ~ -1 + cluster + size + empl_gr +
stories + age + renovated + class_a + class_b +
green_rating + net + amenities + cd_total_07 +
hd_total07 + total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + City_Market_Rent,
data=greenbuildings_train)
grbds_lasso_Y = greenbuildings_test$revenue
grbds_lasso = cv.gamlr(grbds_lasso_X, grbds_lasso_Y, scale=TRUE, nfold=5, verb=TRUE)
library(gamlr)
grbds_lasso_X_val = model.matrix(revenue ~ -1 + cluster + size + empl_gr +
stories + age + renovated + class_a + class_b +
green_rating + net + amenities + cd_total_07 +
hd_total07 + total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + City_Market_Rent,
data = greenbuildings_test)
grbds_lasso = cv.gamlr(grbds_lasso_X, grbds_lasso_Y, scale=TRUE, nfold=5, verb=TRUE)
greenbuildings_new = greenbuildings %>%
filter(is.na(empl_gr) == FALSE) %>%
mutate(revenue = Rent * leasing_rate) %>%
select(-c(CS_PropertyID, Rent, leasing_rate, LEED, Energystar))
greenbuildings_split =  initial_split(greenbuildings_new, prop=0.8)
greenbuildings_train = training(greenbuildings_split)
greenbuildings_test  = testing(greenbuildings_split)
View(greenbuildings_new)
# LASSO
grbds_lasso_X = model.matrix(revenue ~ .-1, data=greenbuildings_train)
grbds_lasso_Y = greenbuildings_test$revenue
grbds_lasso = cv.gamlr(grbds_lasso_X, grbds_lasso_Y, scale=TRUE, nfold=5, verb=TRUE)
greenbuildings_new = greenbuildings %>%
na.omit() %>%
mutate(revenue = Rent * leasing_rate) %>%
select(-c(CS_PropertyID, Rent, leasing_rate, LEED, Energystar))
greenbuildings_split =  initial_split(greenbuildings_new, prop=0.8)
greenbuildings_train = training(greenbuildings_split)
greenbuildings_test  = testing(greenbuildings_split)
# Random forests
greenbuildings_rforest = randomForest(revenue ~ ., data = greenbuildings_train, importance = TRUE)
# Random forests
greenbuildings_rforest = randomForest(revenue ~ ., data = greenbuildings_train, importance = TRUE)
# Boosting
boost1 = gbm(revenue ~ ., data = greenbuildings_train, interaction.depth=4, n.trees=350, shrinkage=.05, distribution="gaussian")
# KNN
grbds_knn = train(revenue ~ ., data = greenbuildings_train, method="knn",
trControl=trainControl(method="cv",number=5),
preProc = c("center", "scale"))
grbds_knn_pred = predict(grbds_knn, newdata = greenbuildings_test)
# LASSO
grbds_lasso_X = model.matrix(revenue ~ .-1, data=greenbuildings_train)
grbds_lasso_Y = greenbuildings_test$revenue
nrow(grbds_lasso_X)
nrow(grbds_lasso_Y)
# Use trees / LASSO / KNN for prediction #
# LASSO
grbds_lasso_X = model.matrix(real_rent ~ .-1, data=grbds_dev)
grbds = greenbuildings %>%
mutate(real_rent = Rent * leasing_rate) %>%
select(-c(CS_PropertyID, Rent, leasing_rate, green_rating)) %>% # Delete useless & co-linear variables
na.omit()
grbds$LEED = factor(grbds$LEED)
grbds$Energystar = factor(grbds$Energystar)
# Dev/val split $
grbds_split = initial_split(grbds, prop=0.8)
grbds_dev = training(grbds_split)
grbds_val  = testing(grbds_split)
# Use trees / LASSO / KNN for prediction #
# LASSO
grbds_lasso_X = model.matrix(real_rent ~ .-1, data=grbds_dev)
grbds_lasso_Y = grbds_dev$real_rent
grbds_lasso = cv.gamlr(grbds_lasso_X, grbds_lasso_Y, scale=TRUE, nfold=5, verb=TRUE)
greenbuildings_new = greenbuildings %>%
mutate(revenue = Rent * leasing_rate) %>%
select(-c(CS_PropertyID, Rent, leasing_rate, LEED, Energystar)) %>%
na.omit()
nrow(greenbuilding_new)
nrow(greenbuildings_new)
greenbuildings_split =  initial_split(greenbuildings_new, prop=0.8)
greenbuildings_train = training(greenbuildings_split)
greenbuildings_test  = testing(greenbuildings_split)
# LASSO
grbds_lasso_X = model.matrix(revenue ~ .-1, data=greenbuildings_train)
grbds_lasso_Y = greenbuildings_train$revenue
grbds_lasso = cv.gamlr(grbds_lasso_X, grbds_lasso_Y, scale=TRUE, nfold=5, verb=TRUE)
grbds_lasso_X_val = model.matrix(revenue ~ .-1, data = greenbuildings_test)
grbds_lasso_predict_min = predict(grbds_lasso, grbds_lasso_X_val, select="min") %>%
as.matrix() %>% as.data.frame()
grbds_lasso_Y_test = greenbuildings_test$revenue %>% as.data.frame()
ggplot(data=greenbuildings_new) +
geom_boxplot(mapping=aes(x=factor(green_rating), y=revenue))+
#  ylim(c(0, 50))+
xlab("Green Certification")+
ylab("Revenue per square foot")
ggplot(data=greenbuildings_new) +
geom_boxplot(mapping=aes(x=factor(green_rating), y=revenue))+
#  ylim(c(0, 50))+
xlab("Green Certification")+
ylab("Revenue per square foot")
ggplot(data=greenbuildings_new) +
geom_boxplot(mapping=aes(x=factor(green_rating), y=revenue))+
xlab("Green Certification")+
ylab("Revenue per square foot")
greenbuildings_new %>%
group_by(green_rating) %>%
summarise(avg_rev = mean(revenue))
greenbuildings_new %>%
group_by(green_rating) %>%
summarise(avg_rev = mean(revenue))
greenbuildings_new = greenbuildings %>%
mutate(revenue = Rent * leasing_rate) %>%
select(-c(CS_PropertyID, Rent, leasing_rate, LEED, Energystar)) %>%
na.omit()
greenbuildings_new %>%
group_by(green_rating) %>%
summarise(avg_rev = mean(revenue))
greenbuildings_new = greenbuildings %>%
mutate(revenue = Rent * leasing_rate) %>%
select(-c(CS_PropertyID, Rent, leasing_rate, LEED, Energystar)) %>%
na.omit()
ggplot(data=greenbuildings_new) +
geom_boxplot(mapping=aes(x=factor(green_rating), y=revenue))+
xlab("Green Certification")+
ylab("Revenue per square foot")
partial(greenbuildings_rforest, pred.var = 'green_rating')
partial(grbds_forest_pdp, pred.var = 'LEED')
# Plot PD function #
## Plot on the whole dataset
grbds_forest_pdp = randomForest(real_rent ~ ., data = grbds, importance = TRUE)
greenbuildings_rforest2 = randomForest(revenue ~ ., data = greenbuildings_new)
partial(greenbuildings_rforest2, pred.var = 'green_rating')
partialPlot(greenbuildings_rforest2, greenbuildings_new, 'green_rating',
xlab = "Green Certification",
ylab = "Revenue per square foot",
main = "The Partial Effect of Green Certifications on Revenue")
greenbuildings_new = greenbuildings %>%
mutate(revenue = Rent * leasing_rate) %>%
select(-c(CS_PropertyID, Rent, leasing_rate, LEED, Energystar)) %>%
na.omit()
greenbuildings_new$green_rating = factor(greenbuildings_new$green_rating)
greenbuildings_rforest2 = randomForest(revenue ~ ., data = greenbuildings_new)
placehd_1 = partial(greenbuildings_rforest2, pred.var = 'green_rating')
partialPlot(greenbuildings_rforest2, greenbuildings_new, 'green_rating',
xlab = "Green Certification",
ylab = "Revenue per square foot",
main = "The Partial Effect of Green Certifications on Revenue")
partial(greenbuildings_rforest2, pred.var = 'green_rating')
partial(greenbuildings_rforest2, pred.var = 'green_rating')[1]
partial(greenbuildings_rforest2, pred.var = 'green_rating')[2]
partial(greenbuildings_rforest2, pred.var = 'green_rating')[2,2]
partial(greenbuildings_rforest2, pred.var = 'green_rating')[1,2]
partial(greenbuildings_rforest2, pred.var = 'green_rating')[2,2] -
partial(greenbuildings_rforest2, pred.var = 'green_rating')[1,2]
nrow(greenbuildings_new)
knitr::opts_chunk$set(echo=FALSE)
#residual graph
modelerror = qmplot(x = longitude,
y = latitude,
data = cahousing,
geom = "point",
color = residuals,
extent = "panel",
maptype = "watercolor",
darken=0.2,
alpha = 0.1) +
scale_alpha(guide = 'none')+
scale_colour_gradient(high="red",low='green') +
modelerror
library(tidyverse)
library(randomForest)
library(mosaic)
library(foreach)
library(rpart)
library(modelr)
library(gbm)
library(pdp)
library(rsample)
library(ggplot2)
library(scales)
library(ggmap)
library(lubridate)
library(randomForest)
library(kableExtra)
head(cahousing)
cahousing = read.csv("https://raw.githubusercontent.com/Cheng-Jipeng/ECO395M/master/data/CAhousing.csv")
head(cahousing)
cahousing = mutate(cahousing,
sdrooms=totalRooms/households,
sdbedrooms=totalBedrooms/households,
totalRooms=NULL,totalBedrooms=NULL)
cahousing_split = initial_split(cahousing, prop = 0.7)
cahousing_train = training(cahousing_split)
cahousing_test = testing(cahousing_split)
cahousing_forest = randomForest(medianHouseValue ~ longitude + latitude + housingMedianAge + sdrooms + sdbedrooms + population + medianIncome, data=cahousing_train, importance=TRUE)
cahousing_forest
y_hat = predict(cahousing_forest,cahousing)
cahousing = mutate(cahousing,
prediction = y_hat,
residuals = abs(medianHouseValue-y_hat))
register_google(key='AIzaSyCxfaeZOsiy02DxnEYVMPW4mIuRyz3hIes')
medianhouse = qmplot(x = longitude,
y = latitude,
data = cahousing,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
extent = "panel",
darken=0.2,
alpha = 0.1) +
scale_alpha(guide = 'none')
medianhouse = qmplot(x = longitude,
y = latitude,
data = cahousing,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
extent = "panel",
darken=0.2,
alpha = 0.1) +
scale_colour_gradient(high="red",low='green')
library(RCurl)
library(tidyverse)
library(mosaic)
library(rsample)
library(randomForest)
library(gbm)
library(modelr)
library(gamlr)
library(caret)
library(pdp)
library(mapdata)
library(ggmap)
library(ggplot2)
# Read and split data #
CAhousing = read.csv("https://raw.githubusercontent.com/Cheng-Jipeng/ECO395M/master/data/CAhousing.csv") %>%
na.omit()
CAh_split = initial_split(CAhousing, prop=0.8)
CAh_dev = training(CAh_split)
CAh_val  = testing(CAh_split)
# Train model in dev set and test in val set#
## Trees
CAh_forest = randomForest(medianHouseValue ~ . , data = CAh_dev)
modelr::rmse(CAh_forest, CAh_val)
CAh_boost = gbm(medianHouseValue ~ . , data = CAh_dev,
interaction.depth=4, n.trees=500, shrinkage=.05)
modelr::rmse(CAh_boost, CAh_val)
## LASSO
CAh_lasso_X = model.matrix(medianHouseValue ~ .-1, data=CAh_dev)
CAh_lasso_Y = CAh_dev$medianHouseValue
CAh_lasso = cv.gamlr(CAh_lasso_X, CAh_lasso_Y, scale=TRUE, nfold=5, verb=TRUE)
CAh_lasso_X_val = model.matrix(medianHouseValue ~ .-1, data=CAh_val)
CAh_lasso_predict_min = predict(CAh_lasso, CAh_lasso_X_val, select="min") %>%
as.matrix() %>% as.data.frame()
CAh_lasso_Y_test = CAh_val$medianHouseValue %>% as.data.frame()
(CAh_lasso_predict_min[[1]] - CAh_val$medianHouseValue)^2 %>% mean() %>% sqrt()
## KNN
CAh_knn = train(medianHouseValue ~., data = CAh_dev, method="knn",
trControl=trainControl(method="cv",number=5),
preProc = c("center", "scale"))
CAh_knn_pred = predict(CAh_knn, newdata = CAh_val)
(CAh_knn_pred-CAh_val$medianHouseValue)^2 %>% mean() %>% sqrt()
# The result shows that random forest is the best model
# Constructing map data with whole dataset#
CAh_forest_all = randomForest(medianHouseValue ~ . , data = CAhousing)
CA_mapdata = CAhousing %>% mutate(medianHouseValue_pred = CAh_forest_all$predicted,
pred_error = CAh_forest_all$predicted - medianHouseValue)
# Map plot #
map = map_data("state") %>% filter(region == 'california')
ggplot() +
geom_polygon(data = map, aes(x = long, y = lat), fill = "palegreen", color = "black") +
geom_point(data = CA_mapdata, aes(x = longitude, y = latitude, color = medianHouseValue))
# set color manually
fun_color_range1 = colorRampPalette(c("green", "blue"))
color1 = fun_color_range1(30)
ggplot() +
geom_polygon(data = map, aes(x = long, y = lat), fill = "palegreen", color = "black") +
geom_point(data = CA_mapdata, aes(x = longitude, y = latitude, color = medianHouseValue_pred))+
scale_colour_gradientn(colors = color1)
# set color manually
fun_color_range2 = colorRampPalette(c("yellow", "red"))
color2 = fun_color_range2(30)
ggplot() +
geom_polygon(data = map, aes(x = long, y = lat), fill = "palegreen", color = "black") +
geom_point(data = CA_mapdata, aes(x = longitude, y = latitude, color = pred_error)) +
scale_colour_gradientn(colors = color2)
medianhouse = qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
extent = "panel",
darken=0.2,
alpha = 0.1) +
scale_colour_gradient(high="red",low='green')
medianhouse
medianhouse = qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
extent = "panel",
darken=0.2) +
scale_colour_gradient(high="red",low='green')
medianhouse
medianhouse = qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2) +
scale_colour_gradient(high="red",low='green')
medianhouse
medianhouse = qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2) +
scale_colour_gradient(high="red",low='green') +
labs(tag = "")
medianhouse
medianhouse = qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2) +
scale_colour_gradient(high="red",low='green') +
labs(fill = ' ')
medianhouse
qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2) +
scale_colour_gradient(high="red",low='green') +
labs(fill = ' ') +
theme(axis.ticks = element_blank(),
axis.text = element_blank()) +
xlab('')+ylab('') +
qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2) +
scale_colour_gradient(high="red",low='green') +
labs(fill = ' ') +
theme(axis.ticks = element_blank(),
axis.text = element_blank()) +
xlab('')+ylab('')
qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2) +
scale_colour_gradient(high="red",low='green') +
labs(fill = ' ') +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2) +
scale_colour_gradient(high="red",low='green') +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
qmplot(x = longitude,
y = latitude,
data = CA_mapdata,
geom = "point",
color = medianHouseValue,
maptype = "watercolor",
darken=0.2,
size = 1) +
scale_colour_gradient(high="red",low='green') +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
